#lang racket
(define (convierte atomo)
  (if (number? atomo)
      (if (integer? atomo)
        (list "Entero: " atomo)
        (list "Real: " atomo)
        )
      (if (equal? '+ atomo)
          (list "Suma: " atomo)
           (if (equal? '- atomo)
              (list "Resta: " atomo)
              (if (equal? '* atomo)
                  (list "Multiplicación: " atomo) 
                  (if (equal? '/ atomo)
                      (list "División: " atomo)
                      (if (equal? '= atomo)
                          (list "Asignación: " atomo)
                          (if (equal? '^ atomo)
                              (list "Potencia: " atomo) 
                              (list "Varialbe: " atomo)
                              )
                          )
                      )
                  )
              )
           )
      )
  )

; Faltan leer comentarios y paréntesis

(define (genera-lista p1)
  (if (eof-object? (peek-char p1))
      '()
      (append (list (convierte (read p1))) (genera-lista p1))
      )
  )

(define (imprime lista p2)
  (define (despliega lista p2)
    (display (first lista) p2)
    (display " " p2)
    (display (second lista) p2)
    (newline p2)
    1)
  (if (empty? lista)
      0
      (+ (despliega (car lista) p2) (imprime (cdr lista) p2))
    )
  )

(define (tokens file1 file2)
  (define p1 (open-input-file file1))
  (define p2 (open-output-file file2))
  (define lista-tokens(genera-lista p1))
  #|
  (display lista-tokens)
  (newline)
  (display (length lista-tokens))
  (newline)
  |#
  (define cantidad (imprime lista-tokens p2))
  (display "Cantidad de tokens: " p2)
  (display cantidad p2)
  (close-output-port p2)
  (close-input-port p1)
  )

(tokens "muestra.txt" "out3.txt")